// scripts/test-polling-system.js
// Script para testar o sistema de polling antes de colocar em produ√ß√£o

const { HotspotUser, Company } = require('./src/models');
const { 
  collectActiveSessionUsage, 
  monitorUserLogouts,
  cleanupOrphanedSessions 
} = require('./src/features/hotspotUser/hotspotUser.service');

const testPollingSystem = async () => {
  console.log('üß™ ================================');
  console.log('üß™ TESTE DO SISTEMA DE POLLING');
  console.log('üß™ ================================\n');

  try {
    // 1. Verificar se a migra√ß√£o foi executada
    console.log('1Ô∏è‚É£ Verificando estrutura do banco...');
    const testUser = await HotspotUser.findOne({ limit: 1 });
    
    if (!testUser) {
      console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado para teste.');
      return;
    }

    // Verificar se os novos campos existem
    const hasNewFields = testUser.hasOwnProperty('currentSessionBytes') && 
                         testUser.hasOwnProperty('sessionId') &&
                         testUser.hasOwnProperty('lastCollectionTime');
    
    if (!hasNewFields) {
      console.error('‚ùå ERRO: Novos campos n√£o encontrados! Execute a migra√ß√£o primeiro.');
      console.log('   Comando: npx sequelize-cli db:migrate');
      return;
    }
    
    console.log('‚úÖ Estrutura do banco OK - Novos campos encontrados\n');

    // 2. Verificar conex√£o com empresas
    console.log('2Ô∏è‚É£ Verificando conex√µes com empresas...');
    const companies = await Company.findAll();
    console.log(`   Encontradas ${companies.length} empresa(s):`);
    
    for (const company of companies) {
      console.log(`   - ${company.name} (${company.mikrotikIp}:${company.mikrotikApiPort})`);
    }
    console.log('');

    // 3. Teste das fun√ß√µes de coleta
    console.log('3Ô∏è‚É£ Testando coleta de sess√µes ativas...');
    console.log('   (Isso pode demorar alguns segundos)\n');
    
    const startTime = Date.now();
    await collectActiveSessionUsage();
    const collectionTime = Date.now() - startTime;
    
    console.log(`‚úÖ Coleta conclu√≠da em ${collectionTime}ms\n`);

    // 4. Teste de monitoramento de logouts
    console.log('4Ô∏è‚É£ Testando monitoramento de logouts...');
    
    const logoutStartTime = Date.now();
    await monitorUserLogouts();
    const logoutTime = Date.now() - logoutStartTime;
    
    console.log(`‚úÖ Monitoramento conclu√≠do em ${logoutTime}ms\n`);

    // 5. Teste de limpeza de sess√µes √≥rf√£s (opcional)
    console.log('5Ô∏è‚É£ Testando limpeza de sess√µes √≥rf√£s...');
    const cleanupStartTime = Date.now();
    await cleanupOrphanedSessions();
    const cleanupTime = Date.now() - cleanupStartTime;
    
    console.log(`‚úÖ Limpeza conclu√≠da em ${cleanupTime}ms\n`);

  } catch (error) {
    console.error('‚ùå ERRO durante o teste do sistema de polling:', error);
  }
};

// Chamando a fun√ß√£o de teste
testPollingSystem();
